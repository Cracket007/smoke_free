from datetime import datetime
from bot_config import bot, TIMEZONE
from message_handler import send_status
from telebot import types
from database import save_user, get_user, get_all_users

def register_commands(bot):
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    commands = [
        types.BotCommand("start", "–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"),
        types.BotCommand("status", "–£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã –Ω–µ –∫—É—Ä–∏—Ç–µ"),
        types.BotCommand("settime", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        types.BotCommand("setdate", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞"),
        types.BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    ]
    bot.set_my_commands(commands)

    @bot.message_handler(commands=['start'])
    def handle_start(message):
        user_id = str(message.from_user.id)
        chat_id = message.chat.id
        name = message.from_user.first_name
        
        user = get_user(user_id)
        if not user:
            save_user(user_id, name, chat_id)
            
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            status_button = types.KeyboardButton('–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?')
            keyboard.add(status_button)
            
            welcome_text = (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 07.01.2025\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"
            )
            
            bot.reply_to(message, welcome_text, reply_markup=keyboard)
        else:
            bot.reply_to(
                message, 
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
            )

    @bot.message_handler(commands=['setdate'])
    def handle_setdate(message):
        try:
            user_id = str(message.from_user.id)
            user = get_user(user_id)
            if not user:
                bot.reply_to(message, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
                
            date_str = message.text.replace('/setdate', '').strip()
            if not date_str:
                bot.reply_to(
                    message, 
                    "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: /setdate 19.01.2025"
                )
                return
                
            quit_date = datetime.strptime(date_str, "%d.%m.%Y")
            quit_date = quit_date.replace(hour=0, minute=0)
            
            save_user(user_id, user['name'], user['chat_id'], 
                     quit_date.strftime("%Y-%m-%d %H:%M"))
                     
            bot.reply_to(
                message, 
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {date_str}\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–Ω–æ–ø–∫–æ–π '–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?'\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ–π /settime"
            )
        except ValueError:
            bot.reply_to(
                message, 
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 19.01.2025"
            )

    @bot.message_handler(commands=['status'])
    def handle_status(message):
        user_id = str(message.from_user.id)
        user = get_user(user_id)
        if not user:
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        if not user.get('quit_date'):
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è")
            return
            
        quit_time = datetime.strptime(user['quit_date'], "%Y-%m-%d %H:%M")
        send_status(user['chat_id'], quit_time)

    @bot.message_handler(commands=['settime'])
    def handle_settime(message):
        try:
            user_id = str(message.from_user.id)
            user = get_user(user_id)
            if not user:
                bot.reply_to(message, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            if not user.get('quit_date'):
                bot.reply_to(
                    message, 
                    "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 19.01.2025"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            times = ['09:00', '12:00', '15:00', '18:00', '21:00']
            buttons = [types.KeyboardButton(time) for time in times]
            markup.add(*buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            back_button = types.KeyboardButton('–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?')
            markup.add(back_button)
            
            current_time = user.get('notify_time', '15:00')
            bot.reply_to(
                message,
                f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {current_time}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫\n"
                "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 10:30 –∏–ª–∏ 20:00\n\n"
                "‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ handle_settime: {e}")  # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @bot.message_handler(commands=['help'])
    def handle_help(message):
        help_text = (
            "üö≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üîπ /start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
            "üîπ /status - –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã –Ω–µ –∫—É—Ä–∏—Ç–µ\n"
            "üîπ /settime - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "üîπ /setdate - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "üîπ /check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "‚ú® –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?' üïí\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì üìÖ\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚è∞\n\n"
            "üéØ –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n"
            "üí™ –í–º–µ—Å—Ç–µ –º—ã —Å–ø—Ä–∞–≤–∏–º—Å—è!"
        )
        bot.reply_to(message, help_text)

    @bot.message_handler(commands=['check'])
    def handle_check(message):
        try:
            user_id = str(message.from_user.id)
            user = get_user(user_id)
            if not user:
                bot.reply_to(message, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            current_time = datetime.now(TIMEZONE)
            notify_time = user.get('notify_time', '15:00')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
            notify_hours, notify_minutes = map(int, notify_time.split(':'))
            notify_datetime = current_time.replace(hour=notify_hours, minute=notify_minutes)
            
            if current_time > notify_datetime:
                next_notify = "–∑–∞–≤—Ç—Ä–∞"
            else:
                next_notify = "—Å–µ–≥–æ–¥–Ω—è"
            
            bot.reply_to(
                message,
                f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ö–∏–µ–≤): {current_time.strftime('%H:%M')}\n"
                f"üìÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notify_time}\n"
                f"üîî –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {next_notify} –≤ {notify_time}"
            )
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @bot.message_handler(func=lambda message: True)
    def handle_text(message):
        try:
            user_id = str(message.from_user.id)
            user = get_user(user_id)
            
            if not user:
                bot.reply_to(message, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            text = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
            if ':' in text and len(text) == 5:
                try:
                    hours, minutes = map(int, text.split(':'))
                    if 0 <= hours < 24 and 0 <= minutes < 60:
                        if not user.get('quit_date'):
                            bot.reply_to(
                                message,
                                "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                                "–ù–∞–ø—Ä–∏–º–µ—Ä: 19.01.2025"
                            )
                            return
                            
                        save_user(user_id, user['name'], user['chat_id'], 
                                user.get('quit_date'), text)
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
                        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        status_button = types.KeyboardButton('–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?')
                        keyboard.add(status_button)
                        
                        bot.reply_to(
                            message, 
                            f"‚è∞ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {text}\n"
                            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–æ–π /settime",
                            reply_markup=keyboard
                        )
                        return
                except ValueError:
                    pass
            
            if text == '–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?' or text == '/status':
                if not user.get('quit_date'):
                    bot.reply_to(message, "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è")
                    return
                quit_time = datetime.strptime(user['quit_date'], "%Y-%m-%d %H:%M")
                send_status(user['chat_id'], quit_time)
                return
            
            try:
                quit_date = datetime.strptime(text, "%d.%m.%Y")
                quit_date = quit_date.replace(hour=0, minute=0)
                save_user(user_id, user['name'], user['chat_id'], 
                         quit_date.strftime("%Y-%m-%d %H:%M"))
                bot.reply_to(
                    message, 
                    f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {text}\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–Ω–æ–ø–∫–æ–π '–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?'\n"
                    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ–π /settime"
                )
                
            except ValueError:
                bot.reply_to(
                    message, 
                    "üö≠ –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è.\n\n"
                    "–ß—Ç–æ —è —É–º–µ—é:\n"
                    "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ –ö–Ω–æ–ø–∫—É '–°–∫–æ–ª—å–∫–æ —è –Ω–µ –∫—É—Ä—é?' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –æ—Ç–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "‚Ä¢ /settime –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                    "‚Ä¢ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
                )
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}") 