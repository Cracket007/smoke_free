from datetime import datetime
import schedule
import time
from threading import Thread
import signal
import sys
import os
import socket
import urllib3
from dotenv import load_dotenv

from bot_config import bot, TIMEZONE
from commands import register_commands
from message_handler import send_status, send_voice_status
from database import get_all_users, get_user, init_db
from scheduler import setup_schedules

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
socket.setdefaulttimeout(30)
urllib3.disable_warnings()

running = True

def signal_handler(sig, frame):
    global running
    print('\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...')
    running = False
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def send_notification(user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        print(f"üîî –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è user_id: {user_id}")
        user = get_user(user_id)
        if user and user.get('quit_date'):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['name']}")
            quit_time = datetime.strptime(user['quit_date'], "%Y-%m-%d %H:%M")
            print(f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞: {quit_time}")
            send_voice_status(user['chat_id'], quit_time)
            print(f"‚ú® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user['name']}")
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ—Ç–∫–∞–∑–∞: {user_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def test_schedule():
    now = datetime.now(TIMEZONE)
    print(f"üéØ –¢–µ—Å—Ç–æ–≤–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –≤ {now.strftime('%H:%M:%S')}")

def setup_schedules():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        schedule.clear()
        users = get_all_users()
        print(f"\nüîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        schedule.every().minute.do(test_schedule)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)")
        
        if not users:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        for user in users:
            notify_time = user.get('notify_time')
            if notify_time:
                print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è {user['name']}: {notify_time}")
                job = schedule.every().day.at(notify_time).do(send_notification, user['user_id'])
                print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user['name']} –Ω–∞ {notify_time} (–ö–∏–µ–≤)")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
                next_run = job.next_run
                print(f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {user['name']}")
                
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {len(schedule.jobs)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

def run_bot():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = Thread(target=bot.polling, kwargs={
        'none_stop': True,
        'interval': 3,
        'timeout': 60
    })
    bot_thread.daemon = True
    bot_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    while running:
        try:
            schedule.run_pending()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        time.sleep(1)

def main():
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    register_commands(bot)
    setup_schedules()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    run_bot()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        signal_handler(signal.SIGINT, None)
