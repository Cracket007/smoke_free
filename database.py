import sqlite3
from datetime import datetime
import pytz

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∏–µ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = pytz.timezone('Europe/Kiev')

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ notifications_enabled
    c.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in c.fetchall()]
    
    if 'notifications_enabled' not in columns:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        c.execute('ALTER TABLE users ADD COLUMN notifications_enabled BOOLEAN DEFAULT TRUE')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ notifications_enabled")
    
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            name TEXT,
            chat_id INTEGER,
            quit_date TEXT,
            notify_time TEXT DEFAULT '15:00',
            notifications_enabled BOOLEAN DEFAULT TRUE
        )
    ''')
    conn.commit()
    conn.close()

def save_user(user_id: str, name: str, chat_id: int, quit_date: str = None, notify_time: str = None, notifications_enabled: bool = True):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        
        print(f"\nüîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"üë§ ID: {user_id}")
        print(f"üìõ –ò–º—è: {name}")
        print(f"üí¨ Chat ID: {chat_id}")
        print(f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞: {quit_date}")
        print(f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notify_time}")
        print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {notifications_enabled}")
        
        if notify_time:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            hours, minutes = map(int, notify_time.split(':'))
            if not (0 <= hours < 24 and 0 <= minutes < 60):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
                
        c.execute('''
            INSERT OR REPLACE INTO users (user_id, name, chat_id, quit_date, notify_time, notifications_enabled)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, name, chat_id, quit_date, notify_time, notifications_enabled))
        
        conn.commit()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {str(e)}")
        print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}")
    finally:
        conn.close()

def get_user(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = c.fetchone()
    conn.close()
    if user:
        return {
            'user_id': user[0],
            'name': user[1],
            'chat_id': user[2],
            'quit_date': user[3],
            'notify_time': user[4],
            'notifications_enabled': user[5]
        }
    return None

def get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users')
    users = c.fetchall()
    conn.close()
    return [{
        'user_id': user[0],
        'name': user[1],
        'chat_id': user[2],
        'quit_date': user[3],
        'notify_time': user[4],
        'notifications_enabled': user[5]
    } for user in users] 